             add .                     commit
local files ---------> staging area -----------------> Repository
<------------------------------------------------------------


0) git help

1) git init

2) git status

3) git add . 	    => Add all files to staging of the working directory

4) git add test.txt => Add test.txt file to staging of the working directory

5) git commit -m "Initial commit"

6) git log => Get information of commits about who author made commits which 
date he commited..

7) git log -n 2 => It means from buch of list of commits;
how many commits you want to see.

8) git log --author="tirth" => To see particular author made commits. 
(Name should be match).

9) git log --since = 2020-04-15 =>To see commits since the mention date.

10)git log --until = 2020-04-15 =>To see commits until the mention date.

11) git diff => if you want to check which line is modified at local file area.

12) git diff --staged => if you want to check which line is modified at staging area.

13) git rm filename => To remove the file.

14) git checkout -- filename => To pull the file from repository to local.

15) git reset HEAD => To move file from staging area to local.

16) git commit --amend -m 'Added' => To change the commit messages.

17) git reset --soft (SHA) => To reset in repository.

18) git reset (SHA) => To reset in staging and repository.

17) git reset --hard (SHA) => To reset in local,staging and repository.

***********Note:- clean will not work after it goes to staging area **************

18) git clean -n => Show query of what files will be removed.

19) git clean -f => Remove all the files .

20) Make a file of .gitignore and under that write which file you want to ignore.
	*.js => Ignore all js files.
	node_modules => Ignore node_modules.
	!app.js => It will not ignore this app.js file 

21) git rm --cached (filename) => It will not delete file;git will not track this file.

22)Git will not keep track of an empty folder.To keep track make file .gitkeep
(it can be anything) inside that empty folder now git will track it.

23) git ls-tree (SHA) => It gives the directory or file structure.

24) git log --oneline => It will display in one line.

25) git log --oneline -2 => It will show first 2 log display in one line.

26) git log (SHA2)..(SHA1) => It will give the range of log.

27) git log --grep="ignore" => Here it will show log that is matching with ignore.

28) git log --format=oneline =>It formats in oneline.

29) git log --format=short => It format and give short desc of log.

30) git log --format=fuller => It format and give long desc of log.  

31) git branch => TO check the branch.

32) git branch newnav(anybranchname) => To create new branch.

33) git checkout (Branchname) => To switch between the branch

34) git commit -am 'Added' => Shortcut of adding and commit both.

35) git checkout -b footer(anybranchname) => Another way to create branch.

36) git checkout -- (filename) => To get rid of this file.

37) git log --graph --oneline --decorate --all => To see all log of all branches.

38) git diff (branchname2)..(branchname1) => Give range of log betn them.

39) git branch -m (oldbranchname)(newbranchname) => It will rename branch name.

40) git branch -d (branchname) => It will delete empty branch. 

41) git branch -D (branchname) => It will forcefully delete branch.

42) git merge (branchname) => It will merge with your branch.